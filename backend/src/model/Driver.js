/*
 * Uber App MVP - Registration and Login
 * An API for learning API first design approach
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/User'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./User'));
  } else {
    // Browser globals (root is window)
    if (!root.UberAppMvpRegistrationAndLogin) {
      root.UberAppMvpRegistrationAndLogin = {};
    }
    root.UberAppMvpRegistrationAndLogin.Driver = factory(root.UberAppMvpRegistrationAndLogin.ApiClient, root.UberAppMvpRegistrationAndLogin.User);
  }
}(this, function(ApiClient, User) {
  'use strict';

  /**
   * The Driver model module.
   * @module model/Driver
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>Driver</code>.
   * @alias module:model/Driver
   * @class
   * @extends module:model/User
   */
  var exports = function() {
    User.call(this);
  };

  /**
   * Constructs a <code>Driver</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Driver} obj Optional instance to populate.
   * @return {module:model/Driver} The populated <code>Driver</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      User.constructFromObject(data, obj);
      if (data.hasOwnProperty('driverId'))
        obj.driverId = ApiClient.convertToType(data['driverId'], 'Number');
      if (data.hasOwnProperty('companyId'))
        obj.companyId = ApiClient.convertToType(data['companyId'], 'Number');
      if (data.hasOwnProperty('licenceNo'))
        obj.licenceNo = ApiClient.convertToType(data['licenceNo'], 'String');
      if (data.hasOwnProperty('picture'))
        obj.picture = ApiClient.convertToType(data['picture'], 'String');
    }
    return obj;
  }

  exports.prototype = Object.create(User.prototype);
  exports.prototype.constructor = exports;
  /**
   * @member {Number} driverId
   */
  exports.prototype.driverId = undefined;

  /**
   * @member {Number} companyId
   */
  exports.prototype.companyId = undefined;

  /**
   * @member {String} licenceNo
   */
  exports.prototype.licenceNo = undefined;

  /**
   * @member {String} picture
   */
  exports.prototype.picture = undefined;

  return exports;

}));
