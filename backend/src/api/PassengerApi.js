/*
 * Uber App MVP - Registration and Login
 * An API for learning API first design approach
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Passenger', 'model/Passengers'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Passenger'), require('../model/Passengers'));
  } else {
    // Browser globals (root is window)
    if (!root.UberAppMvpRegistrationAndLogin) {
      root.UberAppMvpRegistrationAndLogin = {};
    }
    root.UberAppMvpRegistrationAndLogin.PassengerApi = factory(root.UberAppMvpRegistrationAndLogin.ApiClient, root.UberAppMvpRegistrationAndLogin.Passenger, root.UberAppMvpRegistrationAndLogin.Passengers);
  }
}(this, function(ApiClient, Passenger, Passengers) {
  'use strict';

  /**
   * Passenger service.
   * @module api/PassengerApi
   * @version 1.0.0
   */

  /**
   * Constructs a new PassengerApi. 
   * @alias module:api/PassengerApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createPassenger operation.
     * @callback module:api/PassengerApi~createPassengerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create passenger
     * Create a new Passenger
     * @param {module:model/Passenger} body Passenger object that need to be created.
     * @param {module:api/PassengerApi~createPassengerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createPassenger = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createPassenger");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/passengers', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePassenger operation.
     * @callback module:api/PassengerApi~deletePassengerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Passenger using passenger ID
     * todo
     * @param {Number} passengerId Passenger id to delete
     * @param {module:api/PassengerApi~deletePassengerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deletePassenger = function(passengerId, callback) {
      var postBody = null;

      // verify the required parameter 'passengerId' is set
      if (passengerId === undefined || passengerId === null) {
        throw new Error("Missing the required parameter 'passengerId' when calling deletePassenger");
      }


      var pathParams = {
        'passengerId': passengerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/passengers/{passengerId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPassengerById operation.
     * @callback module:api/PassengerApi~getPassengerByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Passenger} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Passenger by passengerID
     * todo
     * @param {String} passengerId The passengersId that needs to be fetched. Use 1111 for testing. 
     * @param {module:api/PassengerApi~getPassengerByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Passenger}
     */
    this.getPassengerById = function(passengerId, callback) {
      var postBody = null;

      // verify the required parameter 'passengerId' is set
      if (passengerId === undefined || passengerId === null) {
        throw new Error("Missing the required parameter 'passengerId' when calling getPassengerById");
      }


      var pathParams = {
        'passengerId': passengerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Passenger;

      return this.apiClient.callApi(
        '/passengers/{passengerId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPassengers operation.
     * @callback module:api/PassengerApi~getPassengersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Passengers} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of passengers
     * Get list of passengers
     * @param {module:api/PassengerApi~getPassengersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Passengers}
     */
    this.getPassengers = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Passengers;

      return this.apiClient.callApi(
        '/passengers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePassenger operation.
     * @callback module:api/PassengerApi~updatePassengerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing Passenger
     * todo
     * @param {module:model/Passenger} body Passenger object that needs to be added.
     * @param {module:api/PassengerApi~updatePassengerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updatePassenger = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatePassenger");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/passengers', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
