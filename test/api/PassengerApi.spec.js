/*
 * Uber App MVP - Registration and Login
 * An API for learning API first design approach
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.UberAppMvpRegistrationAndLogin);
  }
}(this, function(expect, UberAppMvpRegistrationAndLogin) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new UberAppMvpRegistrationAndLogin.PassengerApi();
  });

  describe('(package)', function() {
    describe('PassengerApi', function() {
      describe('createPassenger', function() {
        it('should call createPassenger successfully', function(done) {
          // TODO: uncomment, update parameter values for createPassenger call
          /*
          var body = new UberAppMvpRegistrationAndLogin.Passenger();
          body.username = "";
          body.password = "";
          body.email = "";
          body.firstName = "";
          body.lastName = "";
          body.phone = "";
          body.status = "pending";

          instance.createPassenger(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deletePassenger', function() {
        it('should call deletePassenger successfully', function(done) {
          // TODO: uncomment, update parameter values for deletePassenger call
          /*
          var passengerId = 789;

          instance.deletePassenger(passengerId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPassengerById', function() {
        it('should call getPassengerById successfully', function(done) {
          // TODO: uncomment, update parameter values for getPassengerById call and complete the assertions
          /*
          var passengerId = "passengerId_example";

          instance.getPassengerById(passengerId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(UberAppMvpRegistrationAndLogin.Passenger);
            expect(data.username).to.be.a('string');
            expect(data.username).to.be("");
            expect(data.password).to.be.a('string');
            expect(data.password).to.be("");
            expect(data.email).to.be.a('string');
            expect(data.email).to.be("");
            expect(data.firstName).to.be.a('string');
            expect(data.firstName).to.be("");
            expect(data.lastName).to.be.a('string');
            expect(data.lastName).to.be("");
            expect(data.phone).to.be.a('string');
            expect(data.phone).to.be("");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("pending");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getPassengers', function() {
        it('should call getPassengers successfully', function(done) {
          // TODO: uncomment getPassengers call and complete the assertions
          /*

          instance.getPassengers(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(UberAppMvpRegistrationAndLogin.Passengers);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updatePassenger', function() {
        it('should call updatePassenger successfully', function(done) {
          // TODO: uncomment, update parameter values for updatePassenger call
          /*
          var body = new UberAppMvpRegistrationAndLogin.Passenger();
          body.username = "";
          body.password = "";
          body.email = "";
          body.firstName = "";
          body.lastName = "";
          body.phone = "";
          body.status = "pending";

          instance.updatePassenger(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
